#!/bin/sh

showHelp () {
cat << EOF

NAME
	video_stabilize

SYNOPSIS
	video_stabilize [FILENAME] -f FILES [OPTION...]

ARGUMENTS
	FILENAME - name of the source dir
	           (ignored when -f option is provided)

OPTIONS
	-h, --help              display this help and exit
	-j, --jobs JOBS     (default: 1) number of parallel jobs
	-f, --files FILES   list of newline separated source file names
	                    (when used, the FILENAME argument is ignored)
EOF
}

function log () {
	if [[ $verbose == "-verbose" ]]; then
		echo "$1"
	fi
}

# Init options.
jobs=1
files=''
framerate=''

options=$(getopt -l "help,jobs:,files:" -o "hj:f:" -a -- "$@")
eval set -- "$options"

while true; do
	case $1 in
		-h|--help) showHelp; exit 0 ;;
		-j|--jobs) shift; jobs="$1" ;;
		-f|--files) shift; files="$1" ;;
		--) shift; break;;
	esac
	shift
done

# Init from arguments (unless -f was provided).
if [ -z "$files" ]; then
	files="$@"
fi

# Extract full paths.
files=$(printf "$files" | tr '\n' '\0' | xargs -0 realpath)
list=""

while IFS= read -r file; do
	if [ ! -f "$file" ]; then
		echo "Not a file $file"
		exit 1
	fi

	filename=$(basename -- "$file")
	extension="${filename##*.}"

	fn="${filename%.*}_s.mp4"
	vec="${filename}_transform_vectors.trf"

	list+=$(printf "ffmpeg -i '%s' -vf vidstabdetect=stepsize=32:shakiness=10:accuracy=15:result='%s' -f null -" "$file" "$vec")
	list+=' && '
	list+=$(printf "ffmpeg -i '%s' -y -vf vidstabtransform=input='%s':zoom=0:smoothing=10,unsharp=5:5:0.8:3:3:0.4 -vcodec libx264 -tune film %s" "$file" "$vec" "$fn")
	list+=' && '
	list+=$(printf "rm '%s'" "$vec")
	list+=$'\n'

done <<< "$files"

echo "==="
echo "list:"
echo "$list"

# Run
printf "$list" | parallel --jobs $jobs
