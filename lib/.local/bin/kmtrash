#!/bin/sh

# TODO: handle delete directories

showHelp () {
cat << EOF

NAME
	Move a file to the trash.
	Move multiple files to the trash.
	Empty the trash.
	Print trash into.

SYNOPSIS
	kmtrash FILENAME [OPTION...]
	kmtrash -f FILENAME [OPTION...]

ARGUMENTS
	FILENAME - name of the file to be moved to trash
	           (ignored when -f options is provided)

OPTIONS
	-h, --help         display this help and exit
	-i, --info         show trash stats and exit
	-f, --files FILES  list of newline separated file names to move to the trash
	-t, --timestamp    put files into a dir in trash (trash easier to manage)
	-e, --empty        empty the trash
	-v, --verbose      show what the script is doing
	-d, --debug        dump debug info into ./trash_debug.txt file
	-b, --batch NUM    move also NUM consecutive files to trash

EXAMPLES
	Mmove a file to the trash:

		kmtrash filename.txt

	Move many files to the trash:

		kmtrash -f 'filename1.txt
		file name 2.txt
		file! with special chars"\'.txt'

	Empty the trash:

		kmtrash -e

	Empty the trash and then move a file to the trash:

		kmtrash -e filename.txt

	Print trash info:

		kmtrash -i

EOF
}

# Init options.
export show_path=0
export info=0
export files=''
export batch=''
export timestamp=0
export empty=0
export verbose=''
export debug=0

options=$(getopt -l "help,path,info,files:,batch:,timestamp,empty,debug,verbose" -o "hpif:b:tedv" -a -- "$@")
eval set -- "$options"

while true; do
	case $1 in
		-h|--help) showHelp; exit 0 ;;
		-i|--info) export info=1 ;;
		-f|--files) shift; export files="$1" ;;
		-b|--batch) shift; export batch="$1" ;;
		-t|--timestamp) export timestamp=1 ;;
		-e|--empty) export empty=1 ;;
		-d|--debug) export debug=1 ;;
		-v|--verbose) export verbose='-v' ;;
		--) shift; break;;
	esac
	shift
done

# Init arguments (unless -f was provided)
if [ -z "$files" ]; then
	files="$@"
fi

# Build relative paths.
files=$(printf "$files" | tr '\n' '\0' | xargs -0 -I{} realpath "{}" --relative-to="$PWD")

trash_path=$(kmtrashpath)

# Show trash stats
if [ $info -eq 1 ]; then
	echo "$(du -h $trash_path)"
	exit
fi

# Empty the trash
if [ $empty -eq 1 ]; then
	rsync -a $verbose --delete "$(mktemp -d)/" "$trash_path"
fi

# Return if no files
if [[ -z $files ]]; then
	exit 0
fi

# Append timestamp to trash path
if [ $timestamp -eq 1 ]; then
	segment=$(date +%s%N)
	trash_path+="$segment/"
fi

# Dump debug info
if [ $debug -eq 1 ]; then
	echo "$files" > ./trash_debug.txt
	echo "Trash: $trash_path" >> ./trash_debug.txt
fi

results=''
if [[ ! -z "$batch" ]]; then
	while IFS= read -r file; do
		if [[ -f "$file" ]]; then
			dir=$(dirname $file)
			b=$(basename $file)
			additional_files="$(find "$dir/." -type f -print0 -maxdepth 1 | xargs -0 realpath | sort | awk '/'$b'$/{x=NR+'$batch'}(NR<=x){print}')"
			trash -t -f "$additional_files"
		fi
	done <<< "$files"
else
	# Move to trash using rsync
	rsync -a $verbose --remove-source-files --files-from=<(printf "$files") . "$trash_path"
fi
