lua << EOF

-- Packer is used as a vim package manager.
-- To install, follow guides on: https://github.com/wbthomason/packer.nvim

vim.cmd [[packadd packer.nvim]]
return require('packer').startup(function(use)
  use 'wbthomason/packer.nvim'

  -- Theme
  use 'vim-airline/vim-airline'
  use 'joshdick/onedark.vim'

  -- Browsing
  use 'junegunn/fzf'
  use 'junegunn/fzf.vim'
  use 'airblade/vim-rooter'
  use 'preservim/nerdtree'
  use 'ryanoasis/vim-devicons'
  use 'ludovicchabant/vim-gutentags'
  use 'nvim-lua/plenary.nvim'
  use 'ThePrimeagen/harpoon'

  -- Git
  use 'airblade/vim-gitgutter'
  use 'tpope/vim-fugitive'

  -- Coding
  use 'sheerun/vim-polyglot'
  use 'jiangmiao/auto-pairs'
  use 'tpope/vim-endwise'        -- add 'end' in Ruby
  use 'alvan/vim-closetag'
  use 'editorconfig/editorconfig-vim'

-- DOT SKIP server
--  use 'neoclide/coc.nvim' --, {'do': 'yarn install --frozen-lockfile'}
--  use 'fatih/vim-go' --, { 'do': ':GoUpdateBinaries' }
use {
  'VonHeikemen/lsp-zero.nvim',
  branch = 'v2.x',
  requires = {
    -- LSP Support
    {'neovim/nvim-lspconfig'},             -- Required
    {                                      -- Optional
      'williamboman/mason.nvim',
      run = function()
        pcall(vim.cmd, 'MasonUpdate')
      end,
    },
    {'williamboman/mason-lspconfig.nvim'}, -- Optional

    -- Autocompletion
    {'hrsh7th/nvim-cmp'},     -- Required
    {'hrsh7th/cmp-nvim-lsp'}, -- Required
    {'L3MON4D3/LuaSnip'},     -- Required
    {'hrsh7th/cmp-buffer'},
  }
}
-- DOT END

  use 'bronson/vim-trailing-whitespace'
  use 'mbbill/undotree'          -- undo history visualizer
  use 'vim-scripts/YankRing.vim' -- history of previous yanks, changes and deletes


local lsp = require('lsp-zero')
lsp.preset("recommended")

lsp.ensure_installed({
'tsserver',
'eslint',
'lua_ls',
'solargraph',
'gopls',
})

local cmp = require('cmp')

cmp.setup({
  sources = {
    {name = 'path'},
    {name = 'nvim_lsp'},
	{name = 'buffer'},
  },
})

local cmp_select = {behavior = cmp.SelectBehavior.Select}
local cmp_mappings = lsp.defaults.cmp_mappings({
  ['<C-j>'] = cmp.mapping.select_next_item(cmp_select),
  ['<C-k>'] = cmp.mapping.select_prev_item(cmp_select),
  ['<C-l>'] = cmp.mapping.confirm({ select = true }),
  ['<Tab>'] = cmp.mapping.confirm({ select = true }),
})

lsp.setup_nvim_cmp({
  mapping = cmp_mappings
})

lsp.setup()

end)
EOF

let mapleader="\<Space>"
syntax on
set encoding=utf-8
set hidden
set noerrorbells
set number relativenumber
set smartcase
set ignorecase
set noswapfile
set nobackup
set nowritebackup
set undodir=$USER_TMPDIR
set undofile
set incsearch
set background=dark
set cursorline
set list               " Show whitespace chars
set colorcolumn=80     " Max line length indicator
set cmdheight=2
set updatetime=1000
set shortmess+=c
set signcolumn=yes
set nocompatible        " Make arrow keys work in insert mode
set termguicolors
set ttimeoutlen=100
set nowrap

" DOT SKIP server
set spell               " Enable spelling
set spelllang=en_us,pl
" DOT END

" Macros
let @s = "F\"r\'f\"r\'"   " Change double quotes to single
let @d = "F\'r\"f\'r\"T{" " Change single quotes to double
let @h = "f,a\<CR>\<Esc>"

filetype plugin on
filetype indent on
set ma
set autoindent " Copy indent from current line to the new line

" Set the tab width
set tabstop=4
set shiftwidth=4

augroup filetype
	autocmd!
	autocmd FileType nerdtree setlocal relativenumber
	autocmd FileType html setlocal ts=2 sts=2 sw=2
	autocmd FileType ruby setlocal ts=2 sts=2 sw=2
	autocmd FileType javascript setlocal ts=2 sts=2 sw=2
augroup END

augroup testgroup
	autocmd!
	autocmd Bufenter *erubis set syntax=html
	autocmd Bufenter *erubis setlocal ts=2 sts=2 sw=2
	autocmd Bufenter *vue set syntax=javascript
	autocmd Bufenter *vue setlocal ts=2 sts=2 sw=2
augroup END

" Close all buffers except current one.
command! BufOnly execute '%bdelete|edit #|normal `"''"`'
map <leader>b :BufOnly<CR>

" Go to next spelling error
map <C-s> ]s

map <C-j> :cn<CR>
map <C-k> :cp<CR>

nmap <CR> o<Esc>k

map <leader>q :q<CR>
map <leader>Q :qa<CR>
map <leader>n :NERDTreeToggle<CR>
map <C-t> :NERDTreeFind<CR> z.
map <C-f> :GFiles<CR>
map <C-g> :Rg<CR>
map <leader>/ :BLines<CR>
map <C-b> :Buffers<CR>
map \ :wa<CR>

" Splits
map <leader>j <C-W><C-j>
map <leader>k <C-W><C-k>
map <leader>l <C-W><C-l>
map <leader>h <C-W><C-h>

map <leader>J <C-W>s<C-W><C-j>
map <leader>K <C-W>s
map <leader>L <C-W>v<C-W><C-l>
map <leader>H <C-W>v

" Commands inserting text
map tt :put =strftime('__%Y-%m-%d %H:%M (%a)__')<CR>
map tb :norm obinding.pry<CR>B
map t5 :norm i<%  %><CR>hhi
map t% :norm i<%=  %><CR>hhi
map tp :norm ofmt.Printf("%+v\n", )<CR>i

" vim-airline
let g:airline_powerline_fonts = 1
let g:airline_left_sep = ''
let g:airline_right_sep = ''
set noshowmode
set showtabline=2

" onedark.vim
" Transparency
augroup colorset
	autocmd!
	let s:white = { "gui": "#ABB2BF", "cterm": "145", "cterm16" : "7" }
	autocmd ColorScheme * call onedark#set_highlight("Normal", { "fg": s:white })
augroup END

color onedark
highlight Comment guifg=#687285
highlight LineNr guifg=#687285

" fzf
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.8 } }

" nerdtree
let g:NERDTreeShowHidden=1
let g:NERDTreeAutoDeleteBuffer=1
let g:NERDTreeQuitOnOpen=0
let NERDTreeWinSize = 60
let NERDTreeShowLineNumbers=1
map <leader>w :vertical resize 60<CR>

" vim-gutentags
set statusline+=%{gutentags#statusline()}

" harpoon
map <leader>M :lua require("harpoon.mark").add_file()<CR>
map <leader>m :lua require("harpoon.ui").toggle_quick_menu()<CR>
map <leader>1 :lua require("harpoon.ui").nav_file(1)<CR>
map <leader>2 :lua require("harpoon.ui").nav_file(2)<CR>
map <leader>3 :lua require("harpoon.ui").nav_file(3)<CR>
map <leader>4 :lua require("harpoon.ui").nav_file(4)<CR>
map <leader>5 :lua require("harpoon.ui").nav_file(5)<CR>
map <leader>6 :lua require("harpoon.ui").nav_file(6)<CR>
map <leader>7 :lua require("harpoon.ui").nav_file(7)<CR>
map <leader>8 :lua require("harpoon.ui").nav_file(8)<CR>
map <leader>9 :lua require("harpoon.ui").nav_file(9)<CR>
map <leader>0 :lua require("harpoon.ui").nav_file(0)<CR>

" vim-gitgutter'
highlight GitGutterAdd guifg=#98c379 ctermfg=Green
highlight GitGutterChange guifg=#d08c4d ctermfg=Yellow
highlight GitGutterDelete guifg=#dd535e ctermfg=Red
let g:gitgutter_enabled = 1
let g:gitgutter_async=1
let g:gitgutter_map_keys = 0
nmap <leader>c <Plug>(GitGutterNextHunk)
nmap <leader>x <Plug>(GitGutterPrevHunk)

" vim-fugitive
map gb :Git blame<CR>

" auto-pairs
let g:AutoPairsShortcutToggle='<C-a>'
let g:AutoPairsShortcutFastWrap='<C-w>'
let g:AutoPairsFlyMode = 1
let g:AutoPairsShortcutBackInsert = '<C-b>'
let g:AutoPairsShortcutJump = '<C-l>'

" vim-closetag
let g:closetag_filenames = '*.html*'

" undotree
nmap <leader>u :UndotreeToggle<CR>

" YankRing
map <leader>p :YRShow<CR>
let g:yankring_paste_using_g = 0
let g:yankring_history_dir = $USER_TMPDIR

" disable vim-go :GoDef short cut (gd), this is handled by LanguageClient [LC]
let g:go_def_mapping_enabled = 0
let g:go_highlight_function_calls = 1
let g:go_highlight_types = 1
